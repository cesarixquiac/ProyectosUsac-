/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package m.Main;

import Analizadores.AnalizadorCss;
import javax.swing.JTextArea;
import Analizadores.AnalizadorHtml;
import Analizadores.AnalizadorJavaScript;
import Token.Token;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;


/**
 *
 * @author cesar
 */
public class AnalizadorGeneralGrafico extends javax.swing.JFrame {

    AnalizadorGeneral analizadorGeneral = new AnalizadorGeneral();
    AnalizadorHtml analizadorHtml = new AnalizadorHtml();
    AnalizadorCss analizadorCss = new AnalizadorCss();
    AnalizadorJavaScript analizadorJS = new AnalizadorJavaScript();

    
    /**
     * Creates new form AnalizadorGeneralGrafico
     */
    public AnalizadorGeneralGrafico() {
        initComponents();
         setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textCodigo = new javax.swing.JTextArea();
        buttonAnalizarCodigo = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        textAreaTraducido = new javax.swing.JTextArea();
        buttonAnalizarCodigo1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("frameAnalizador");

        jLabel1.setText("Codigo Fuente");

        textCodigo.setColumns(20);
        textCodigo.setRows(5);
        jScrollPane2.setViewportView(textCodigo);

        buttonAnalizarCodigo.setText("Analizar Codigo");
        buttonAnalizarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAnalizarCodigoActionPerformed(evt);
            }
        });

        textAreaTraducido.setEditable(false);
        textAreaTraducido.setColumns(20);
        textAreaTraducido.setRows(5);
        jScrollPane3.setViewportView(textAreaTraducido);
        //textAreaTraducido.setLineWrap(true);  // Permite el salto de línea
        //textAreaTraducido.setWrapStyleWord(true);  // Salta de línea al final de una palabra completa

        buttonAnalizarCodigo1.setText("Crear Html");
        buttonAnalizarCodigo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAnalizarCodigo1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(buttonAnalizarCodigo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonAnalizarCodigo1)))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAnalizarCodigo)
                    .addComponent(buttonAnalizarCodigo1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAnalizarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAnalizarCodigoActionPerformed
         // Obtenemos el código fuente del JTextArea de entrada
    String codigo = getTextCodigo().getText();
    
    // Analizamos el código y obtenemos la lista de tokens
    AnalizadorGeneral analizador = new AnalizadorGeneral();
    List<Token> tokens = analizador.analizar(codigo);
    
    // Construimos un texto con los valores de los tokens analizados
    StringBuilder textoTraducido = new StringBuilder();

    for (Token token : tokens) {
        String valor = token.getValor();
        String tipo = token.getTipo();

        // Manejo específico para HTML
        if (tipo.equals("EtiquetaHTML")) {
            textoTraducido.append(valor).append("\n"); // Añadir salto de línea después de etiquetas
        }
        // Manejo específico para CSS
        else if (tipo.equals("Punto y Coma")) {
            textoTraducido.append(valor).append("\n"); // Salto de línea después de cada declaración CSS
        }
        // Manejo específico para JavaScript
        else if (tipo.equals("Salto de Línea")) {
            textoTraducido.append("\n"); // Saltos de línea en JavaScript
        } 
        // Llaves en JavaScript
        else if (valor.equals("{") || valor.equals("}")) {
            textoTraducido.append(valor).append("\n"); // Salto de línea después de las llaves
        } 
        // Operadores compuestos
        else if (tipo.equals("Operador") && esOperadorCompuesto(valor)) {
            textoTraducido.append(valor); // No agregar espacios innecesarios
        } 
        // Otros tokens
        else if (!tipo.equals("Comentario")) {
            // Espacios antes de ciertos símbolos
            if (valor.equals(".") || valor.equals("(") || valor.equals(")")) {
                textoTraducido.append(valor); // Sin espacio antes ni después de puntos o paréntesis
            } else {
                textoTraducido.append(valor).append(" "); // Agregar espacio después de cada token
            }
        }
    }

    // Mostramos el texto traducido en el JTextArea
    textAreaTraducido.setText(textoTraducido.toString());       
    }//GEN-LAST:event_buttonAnalizarCodigoActionPerformed

    private void buttonAnalizarCodigo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAnalizarCodigo1ActionPerformed

        // TODO add your handling code here:
     // Obtenemos el código fuente del JTextArea de entrada
    String codigo = getTextCodigo().getText();
    
    // Analizamos el código y obtenemos la lista de tokens
    AnalizadorGeneral analizador = new AnalizadorGeneral();
    List<Token> tokens = analizador.analizar(codigo);

    // Crear el archivo HTML a partir de los tokens analizados
    crearHtmlDesdeCodigo(tokens);
    }//GEN-LAST:event_buttonAnalizarCodigo1ActionPerformed

   private void crearHtmlDesdeCodigo(List<Token> tokens) {
    StringBuilder htmlContent = new StringBuilder();

    // Cabecera del HTML
    htmlContent.append("<!DOCTYPE html>\n");
    htmlContent.append("<html lang=\"es\">\n");
    htmlContent.append("<head>\n");
    htmlContent.append("    <meta charset=\"UTF-8\">\n");
    htmlContent.append("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
    htmlContent.append("    <title>Documento Generado</title>\n");
    htmlContent.append("    <style>\n");

    // Agregar CSS
    boolean cssSection = false;
    for (Token token : tokens) {
        if (token.getValor().equals(">>[css]")) {
            cssSection = true;  // Cambiar a sección de CSS
            continue;
        } else if (token.getTipo().equals("Token de Estado") && cssSection && token.getValor().equals(">>[html]")) {
            cssSection = false;  // Salir de sección de CSS
            continue;
        }
        
        if (cssSection) {
            htmlContent.append("        ").append(token.getValor().trim()).append("\n");
        }
    }
    
    htmlContent.append("    </style>\n");
    htmlContent.append("</head>\n");
    htmlContent.append("<body>\n");

    // Agregar HTML
    boolean htmlSection = false;
    for (Token token : tokens) {
        if (token.getValor().equals(">>[html]")) {
            htmlSection = true;  // Cambiar a sección de HTML
            continue;
        } else if (token.getTipo().equals("Token de Estado") && htmlSection && token.getValor().equals(">>[js]")) {
            htmlSection = false;  // Salir de sección de HTML
            continue;
        }
        
        if (htmlSection) {
            // Agregar las etiquetas HTML
            htmlContent.append("    ").append(token.getValor().trim()).append("\n");
        }
    }

    htmlContent.append("</body>\n");

    // Agregar JavaScript
    htmlContent.append("<script>\n");
    boolean jsSection = false;
    for (Token token : tokens) {
        if (token.getValor().equals(">>[js]")) {
            jsSection = true;  // Cambiar a sección de JavaScript
            continue;
        } else if (token.getTipo().equals("Token de Estado") && jsSection) {
            jsSection = false;  // Salir de sección de JavaScript
            continue;
        }
        
        if (jsSection) {
            // Agregar el JavaScript
            htmlContent.append("    ").append(token.getValor().trim()).append("\n");
        }
    }
    
    htmlContent.append("</script>\n");
    htmlContent.append("</html>");

    // Guardar el contenido en un archivo
    guardarHtmlEnArchivo(htmlContent.toString());
}

private void guardarHtmlEnArchivo(String htmlContent) {
    try {
        FileWriter fileWriter = new FileWriter("documento_generado.html");
        fileWriter.write(htmlContent);
        fileWriter.close();
        System.out.println("Archivo HTML generado exitosamente.");
    } catch (IOException e) {
        e.printStackTrace();
        System.err.println("Error al generar el archivo HTML.");
    }
}
    
    
    private boolean esOperadorCompuesto(String op) {
    return op.equals("==") || op.equals("!=") || op.equals("<=") || op.equals(">=") || 
           op.equals("||") || op.equals("&&") || op.equals("++") || op.equals("--") || 
           op.equals("=>");
}
    
    public JTextArea getTextCodigo() {
        return textCodigo;
    }

    public void setTextTraducido(JTextArea textTraducido) {
        this.textAreaTraducido = textTraducido;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalizadorGeneralGrafico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalizadorGeneralGrafico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalizadorGeneralGrafico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalizadorGeneralGrafico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnalizadorGeneralGrafico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAnalizarCodigo;
    private javax.swing.JButton buttonAnalizarCodigo1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea textAreaTraducido;
    private javax.swing.JTextArea textCodigo;
    // End of variables declaration//GEN-END:variables
}
